#include <cstdio>
#include <cstdlib>
#include <omp.h>

/* Написать программу, в которой объявить и присвоить начальные значения элементам двумерного массива d[6][8],
 * для инициализации значений использовать генератор случайных чисел.
 * Используя конструкцию директивы sections…section определить три секции для выполнения следующих операций:
 * первая секция выполняет вычисление среднего арифметического значения элементов двумерного массива,
 * вторая секция выполняет вычисление минимального и максимального значений элементов двумерного массива,
 * третья секция выполняет вычисление количества элементов массива, числовые значения которых кратны 3.
 * В каждой секции определить и выдать на экран номер исполняющей нити и результат выполнения вычислений. (3 балла)
*/

int main()
{
    int d[6][8];

    for (int i = 0; i < 6; i++)
    {
        for (int j = 0; j < 8; j ++)
        {
            d[i][j] = rand() % 100;
        }
    }

    /* Вывод двумерного массива для проверки */
    for (int i = 0; i < 6; i++)
    {
        for (int j = 0; j < 8; j ++)
        {
            printf("%d ", d[i][j]);
        }

        printf("\n");
    }

    printf("--------------------------\n");

    #pragma omp parallel sections
    {
        /* Вычисление среднего арифметического */
        #pragma omp section
        {
            int sum = 0;

            for (int i = 0; i < 6; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    sum += d[i][j];
                }
            }

            printf("Thread: %d, AVG: %.2f\n", omp_get_thread_num(), sum * 1.0 / 48);
        }

        /* Вычисление минимального и максимального значений */
        #pragma omp section
        {
            int max = d[0][0];
            int min = d[0][0];

            for (int i = 0; i < 6; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (d[i][j] > max)
                    {
                        max = d[i][j];
                    }

                    if (d[i][j] < min)
                    {
                        min = d[i][j];
                    }
                }
            }

            printf("Thread: %d, MIN: %d, MAX: %d\n", omp_get_thread_num(), min, max);
        }

        /* Вычисление количества элементов кратных 3-м */
        #pragma omp section
        {
            int counter = 0;

            for (int i = 0; i < 6; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    if (d[i][j] % 3 == 0)
                    {
                        counter += 1;
                    }
                }
            }

            printf("Thread: %d, COUNTER: %d\n", omp_get_thread_num(), counter);
        }
    }

    return 0;
}