#include <cstdio>
#include <omp.h>

/*
 * Написать программу, в которой объявить и присвоить начальные значения целочисленным переменным: a и b,
 * определить две параллельные области, первая – с числом нитей 2, вторая – с числом нитей 4.
 * Для первой области переменные a и b объявить защищёнными, с режимом доступа private и firstprivate соответственно,
 * внутри области определить номер нити и выполнить увеличение значения переменных на эту величину.
 * Выдать на экран значения переменных до входа в параллельную область,
 * внутри параллельной области и после выхода из параллельной области.
 * Для второй области переменную a объявить общей, переменную b объявить защищённой, с режимом доступа private,
 * определить номер нити и выполнить уменьшение значения переменных на эту величину.
 * Выдать на экран значения переменных до входа в параллельную область,
 * внутри параллельной области и после выхода из параллельной области.
 * Неинициализированные переменные инициализировать. (2 балла)
*/

int main()
{
    int a = 0;
    int b = 0;

    printf("1: Before - a: %d, b: %d\n", a, b);
    printf("-------------------------\n");

#pragma omp parallel private(a) firstprivate(b) num_threads(2) default(none)
    {
        /*
         * Начальное значение private копии переменной не определено.
         * Присвоим ей начальное значение.
         */
        a = 0;

        int thread_num = omp_get_thread_num();

        a += thread_num;
        b += thread_num;

        printf("1, %d: Inside - a: %d, b: %d\n", thread_num, a, b);
    }

    printf("-------------------------\n");
    printf("1: After - a: %d, b: %d\n", a, b);

    printf("-------------------------\n");

    printf("2: Before - a: %d, b: %d\n", a, b);
    printf("-------------------------\n");

#pragma omp parallel shared(a) private(b) num_threads(4) default(none)
    {
        b = 0;

        int thread_num = omp_get_thread_num();

        #pragma omp atomic
        a -= thread_num;

        b -= thread_num;

        printf("2, %d: Inside - a: %d, b: %d\n", thread_num, a, b);
    }

    printf("-------------------------\n");
    printf("2: After - a: %d, b: %d\n", a, b);

    return 0;
}
